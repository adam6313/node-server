'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isRef = exports.ref = exports.string = exports.object = exports.number = exports.func = exports.date = exports.binary = exports.boolean = exports.array = exports.alternatives = exports.any = exports.Joi = undefined;

var _joi = require('joi');

Object.defineProperty(exports, 'Joi', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_joi).default;
  }
});
Object.defineProperty(exports, 'any', {
  enumerable: true,
  get: function get() {
    return _joi.any;
  }
});
Object.defineProperty(exports, 'alternatives', {
  enumerable: true,
  get: function get() {
    return _joi.alternatives;
  }
});
Object.defineProperty(exports, 'array', {
  enumerable: true,
  get: function get() {
    return _joi.array;
  }
});
Object.defineProperty(exports, 'boolean', {
  enumerable: true,
  get: function get() {
    return _joi.boolean;
  }
});
Object.defineProperty(exports, 'binary', {
  enumerable: true,
  get: function get() {
    return _joi.binary;
  }
});
Object.defineProperty(exports, 'date', {
  enumerable: true,
  get: function get() {
    return _joi.date;
  }
});
Object.defineProperty(exports, 'func', {
  enumerable: true,
  get: function get() {
    return _joi.func;
  }
});
Object.defineProperty(exports, 'number', {
  enumerable: true,
  get: function get() {
    return _joi.number;
  }
});
Object.defineProperty(exports, 'object', {
  enumerable: true,
  get: function get() {
    return _joi.object;
  }
});
Object.defineProperty(exports, 'string', {
  enumerable: true,
  get: function get() {
    return _joi.string;
  }
});
Object.defineProperty(exports, 'ref', {
  enumerable: true,
  get: function get() {
    return _joi.ref;
  }
});
Object.defineProperty(exports, 'isRef', {
  enumerable: true,
  get: function get() {
    return _joi.isRef;
  }
});

var _thenify = require('thenify');

var _thenify2 = _interopRequireDefault(_thenify);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var validate = (0, _thenify2.default)(_joi.validate);

function isContextOnlyKey(key) {
  return key === 'params';
}

var validator = function validator(schema, opts_) {
  return function (ctx, next) {
    var opts = Object.assign({}, opts_);
    opts.context = Object.assign({}, ctx, opts.context);
    var keys = Object.keys(schema);
    var promises = [];

    var _loop = function _loop(i, len) {
      var key = keys[i];
      var source = isContextOnlyKey(key) ? ctx : ctx.request;
      promises.push(validate( // eslint-disable-line no-param-reassign
      source[key], schema[key], opts).then(function (validated) {
        Object.defineProperty(source, key, {
          get: function get() {
            return validated;
          }
        });
      }));
    };

    for (var i = 0, len = keys.length; i < len; i++) {
      _loop(i, len);
    }
    return Promise.all(promises).then(next);
  };
};

exports.default = validator;